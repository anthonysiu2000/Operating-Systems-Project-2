Names/netid: Jonathan Konopka (jk1549), Anthony Siu (ays53)


Logic:
    Thread Functions:
        myThreadCreate:
            In order to implement the create mythread API, We will follow the directions set
        in the instructions. We will first create a new thread control block, which will 
        contain the thread id, quantum time elapsed(qte), thread context, thread output, and thread 
        status. We will dynamically allocate memory for each control block.
            After setting thread id to the thread id given in the input, initializing status 
        to scheduled and setting qte to 0, we will create the thread context using the getcontext 
        and makecontext functions.
            After creating and allocating the thread control block, we will add the tcb onto
        the scheduler Linked List of tcbs. The scheduler will decide which thread to run and for how
        long. We do this by inserting a tcb Node into the scheduler Linked List. 

        myThreadYield:
            It is intended to change the state of the thread to Ready. We could not properly implement this
            function due our inexperience with contexts. 

        myThreadExit:
            We pause the timer.
            We set the tcb's output equal to the result of the thread, if the input is not NULL.
            We will then context switch back to the scheduler.

        myThreadJoin: 
            We deallocate the tcb be by simply calling the free() function on the tcb. We do not need to 
        remove the tcb from the linked list, as it has already been removed.

    Scheduler:
        Deciding on which thread: 
            Following the rules set by STCF, our goal is to context switch into the thread with 
        the lowest quantum time elapsed. We will choose a data structure with easy access to
        this variable while also maintaining the ability to insert tcbs at any point in the 
        structure. Because queues and stacks can only insert at one end of the list, we have
        chosen the linked list data structure, where tcbs at the front will have lower quantum
        time elapsed, while tcbs at the rear will have larger quantum time elapsed. We will remove
        the tcb at the front of the list while at the same time context switching to that tcb's
        context.

        Timer Signal:
            Whenever timer ends, and the thread has not exited, we have to increase qte for
        the current tcb by one, set status to scheduled, and context switch back to the 
        scheduler. In addition, because we had previously removed the thread from the arraylist,
        we will insert it back in, accounting for the change in qte.        

        SetTimerQuantum:
            We will preset the Timer Quantum as 5000 microseconds as a global variable.
            We will pause the timer with the "pauseTime" itimerval structure.

        SetTimer:
            One of the arguments in settimer()/gettimer() involves the variable "which", which
        can have the value ITIMER_REAL, ITIMER_VIRTUAL, or ITIMER_PROF. Each of these values
        define when the timer decrements: in real time, when the process is executing, and
        when the process and system are executing. Because we want the time taken by the 
        thread for one quantum time, we will use the ITIMER_VIRTUAL value to decrement time 
        only when inside a thread.

        SetTimer code location:
            We will call settimer in the scheduler function and then immediately context switch to
        the thread with the least qte.

    Mutex:
        Mutexinit:
            We declared the mutex and set its id and locked status to the correct values.
            
        MutexLock:
            Given a mutex, we check if the mutex is unlocked, then set the locked value to 1. We did not implement
            the test-and-set function.

        MutexUnlock:
            Given a mutex, this function unlocks it by setting the value to 0. Removes the latest tcb from the Schedule list. 

        MutexDestroy:
            We will deallocate the mutex by freeing its values.


Benchmark:
    We could not run and test the benchmarks as we did not give ourselves sufficient time to complete the assignment. 


Challenging part:
    One of the biggest challenges during this project was the placement of code and the multitude of
instructions needed for thread creation and scheduling. Before beginning to write any code for the 
scheduler or thread functions, we had to comment every single instruction that that function had
to do in order for scheduling to work. This was much easier than beginning to code each function outright,
as we could write down what each function had to do without worrying about syntax.
    Another challenge was the implementation of the scheduler, which was difficult to test whether or not
the scheduler was working. Due to the scheduler's extreme reliance on context switches, of which we are
very inexperienced coding with, we had to be extremely thorough with our instuctions sent to the scheduler.
    Overall, we did not manage our time well, as the project was much more rigorous than the first. Better time management
would make it easier to implement unfamiliar material and debug large projects. 


Improvement: 
    One of the biggest issues concerned with out code concerns the amount of global variables we had
used in our program. One of the biggest issues with global variables is that they cannot be free() so
easily, and thus take up space in memory. If we could improve anything about our project, decreasing
the number of global variables needed in favor of dynamic local variables located inside functions would
decrease the memory required to run the code.
